{"version":3,"sources":["component/NewTargetInput.js","component/Place.js","component/List.js","App.js","serviceWorker.js","index.js"],"names":["NewTargetInput","props","newMukkit","handleAddMukkit","handleNewMukkit","handlePressEnter","value","onChange","onKeyDown","placeholder","onClick","Place","mukkit","setMukkit","className","isVisited","name","e","key","selected","JSON","parse","localStorage","getItem","setItem","stringify","local","tempArray","i","Object","keys","length","push","handleVisit","removeItem","handleDelete","List","useState","setNewMukkit","useEffect","alert","targetMukkit","target","keyCode","map","row","index","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69976b0a.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction NewTargetInput(props) {\n  const {\n    newMukkit,\n    handleAddMukkit,\n    handleNewMukkit,\n    handlePressEnter\n  } = props;\n\n  return (\n    <div>\n      <input\n        value={newMukkit}\n        onChange={handleNewMukkit}\n        onKeyDown={handlePressEnter}\n        placeholder=\"다음 목표는?\"\n      />\n      <button onClick={handleAddMukkit}>추가</button>\n    </div>\n  );\n}\n\nexport default NewTargetInput;\n","import React from \"react\";\nimport \"./Place.css\";\n\nfunction Place(props) {\n  const { mukkit, setMukkit } = props;\n\n  //방문 버튼 클릭 이벤트 핸들러\n  const handleVisit = key => {\n    let selected = JSON.parse(localStorage.getItem(key));\n    selected.isVisited = true;\n    localStorage.setItem(`${key}`, JSON.stringify(selected));\n\n    const local = { ...localStorage };\n\n    let tempArray = [];\n    for (let i = 0; i < Object.keys(local).length; i++) {\n      const key = localStorage.key(i);\n      const value = JSON.parse(localStorage.getItem(key));\n      tempArray.push({ key: key, value: value });\n    }\n    setMukkit(tempArray);\n  };\n\n  //삭제 버튼 클릭 이벤트 핸들러\n  const handleDelete = key => {\n    localStorage.removeItem(key);\n    const local = { ...localStorage };\n\n    let tempArray = [];\n    for (let i = 0; i < Object.keys(local).length; i++) {\n      const key = localStorage.key(i);\n      const value = JSON.parse(localStorage.getItem(key));\n      tempArray.push({ key: key, value: value });\n    }\n    setMukkit(tempArray);\n  };\n\n  return (\n    <div className=\"place\">\n      <h4 className={`placeName ${mukkit.value.isVisited ? \"visited\" : \"\"}`}>\n        # {mukkit.value.name}\n        <div className=\"btnGroup\">\n          {!mukkit.value.isVisited && (\n            <button className=\"visitBtn\" onClick={e => handleVisit(mukkit.key)}>\n              ✔︎\n            </button>\n          )}\n          <button className=\"deleteBtn\" onClick={e => handleDelete(mukkit.key)}>\n            ✘\n          </button>\n        </div>\n      </h4>\n    </div>\n  );\n}\n\nexport default Place;\n","import React, { useEffect, useState } from \"react\";\nimport NewTargetInput from \"./NewTargetInput\";\nimport Place from \"./Place\";\nimport \"./List.css\";\n\nfunction List() {\n  const [mukkit, setMukkit] = useState([]);\n  const [newMukkit, setNewMukkit] = useState(\"\");\n\n  useEffect(() => {\n    const local = { ...localStorage };\n\n    /* 초기 데이터 삽입 \n    if (Object.keys(local).length === 0) {\n      const first = \"네스트 가스트로바\";\n      localStorage.setItem(\"0\", { name: first, isVisited: true });\n    }\n    */\n\n    if (mukkit.length === 0) {\n      let tempArray = [];\n      for (let i = 0; i < Object.keys(local).length; i++) {\n        const key = localStorage.key(i);\n        const value = JSON.parse(localStorage.getItem(key));\n        tempArray.push({ key: key, value: value });\n      }\n\n      setMukkit(tempArray);\n    }\n  }, [mukkit.length]);\n\n  //신규 입력란 변경 이벤트 핸들러\n  const handleNewMukkit = e => {\n    setNewMukkit(e.target.value);\n  };\n\n  //추가 버튼 클릭 이벤트 핸들러\n  const handleAddMukkit = e => {\n    if (newMukkit === null || newMukkit === \"\") {\n      alert(\"가고 싶은 곳의 이름을 입력해주세요!\");\n      return false;\n    }\n\n    const local = { ...localStorage };\n    const length = Object.keys(local).length;\n\n    let tempArray = [];\n    for (let i = 0; i < length; i++) {\n      const key = localStorage.key(i);\n      const value = JSON.parse(localStorage.getItem(key));\n      tempArray.push({ key: key, value: value });\n    }\n\n    const targetMukkit = { name: newMukkit, isVisited: false };\n    localStorage.setItem(`${length}`, JSON.stringify(targetMukkit));\n\n    tempArray.push({\n      key: `${length}`,\n      value: targetMukkit\n    });\n    setMukkit(tempArray);\n    setNewMukkit(\"\");\n  };\n\n  //신규 입력란 엔터키 입력 이벤트 핸들러\n  const handlePressEnter = e => {\n    if (e.keyCode === 13) handleAddMukkit();\n  };\n\n  return (\n    <div>\n      <div className=\"addBox\">\n        <NewTargetInput\n          newMukkit={newMukkit}\n          handleAddMukkit={handleAddMukkit}\n          handleNewMukkit={handleNewMukkit}\n          handlePressEnter={handlePressEnter}\n        />\n      </div>\n      <div className=\"listBox\">\n        {mukkit.map((row, index) => {\n          return <Place key={index} mukkit={row} setMukkit={setMukkit} />;\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default List;\n","import React from \"react\";\nimport List from \"./component/List\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <h1>언젠간 먹고 말꺼야...!</h1>\n      <List />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}